trigger:
  branches:
    include:
    - main

pool:
  vmImage: windows-latest

variables:
  solutionPath: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: Release

name: $(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

stages:
- stage: BuildNugetApi
  displayName: 'Build and Publish NuGet Package'
  jobs:
  - job: build
    displayName: 'Build Job'
    steps:
    - task: PowerShell@2
      displayName: 'Set Version Variable'
      inputs:
        targetType: inline
        script: |
          $buildNumberVersion = "$(Build.BuildNumber)" -replace "^[^_]+_", ""
          $sourceBranch = "$(Build.SourceBranchName)"
          
          if ($sourceBranch -eq "main") {
            $versionSuffix = ""
          } else {
            # Create a valid pre-release suffix (e.g., -beta, -dev.featurename)
            $sanitizedBranchName = $sourceBranch.Replace("/", "-").Replace("_", "-")
            $versionSuffix = "-$($sanitizedBranchName)"
          }
          
          $finalVersion = "$($buildNumberVersion)$($versionSuffix)"
          
          Write-Host "Final package version determined to be: $($finalVersion)"
          Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$($finalVersion)"

    - task: UseDotNet@2
      displayName: 'Install .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'

    - script: dotnet --info
      displayName: 'Display .NET Info'

    - task: DotNetCoreCLI@2
      displayName: 'Install dotnet-format tool'
      inputs:
        command: custom
        custom: 'tool'
        arguments: 'install --global dotnet-format'

    - task: PowerShell@2
      displayName: 'Check Code Formatting'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Running dotnet format check..."
          dotnet format --verify-no-changes --no-restore --verbosity diagnostic
          # Check the exit code of the last command
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Code formatting is clean."
          } elseif ($LASTEXITCODE -eq 2) {
            Write-Host "⚠️ Formatting check found warnings, but the build will not fail."
            exit 0  # Explicitly exit with a success code
          } else {
            Write-Host "❌ Formatting check failed with exit code $LASTEXITCODE. Failing the build."
            exit 1  # Exit with a failure code
          }

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: $(solutionPath)
        feedsToUse: 'select'
        vstsFeed: 'fbaf94f7-2d40-410a-8a27-de142d2313/2d8c792e-c1ad-4a66-924d-5bc4fec5fca0'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: $(solutionPath)
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: '**/*[Tt]ests/*[Tt]ests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --no-restore'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Pack NuGet Package'
      inputs:
        command: 'pack'
        packagesToPack: '**/Blaise.Nuget.Api.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'PackageVersion'
    
    - task: DotNetCoreCLI@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'fbaf94f7-2d40-410a-8a27-de142d2313/2d8c792e-c1ad-4a66-924d-5bc4fec5fca0'